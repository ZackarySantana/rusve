syntax = "proto3";

package proto;

option go_package = "rusve/proto";

import "users.proto";
import "profile.proto";
import "notes.proto";
import "utils.proto";

message Empty {}

message Id {
    string id = 1;
}

message Page {
    int64 offset = 1;
    int64 limit = 2;
}

message Count {
    int64 count = 1;
}

message AuthResponse {
    string token = 1;
    User user = 2;
}

message StripeUrlResponse {
    string url = 1;
}

message NoteResponse {
    Note note = 1;
    Profile profile = 2;
}

service UsersService {
    rpc CreateUser(Empty) returns (Id) {}
    rpc Auth(Empty) returns (AuthResponse) {}

    rpc GetProfileByUserId(Empty) returns (Profile) {}
    rpc CreateProfile(Profile) returns (Profile) {}

    rpc CreateStripeCheckout(Empty) returns (StripeUrlResponse) {}
    rpc CreateStripePortal(Empty) returns (StripeUrlResponse) {}
}

service NotesService {
    rpc CountNotesByUserId(Empty) returns (Count) {}
    rpc GetNotesByUserId(Page) returns (stream NoteResponse) {}
    rpc GetNoteById(Id) returns (Note) {}
    rpc CreateNote(Note) returns (Note) {}
    rpc DeleteNoteById(Id) returns (Empty) {}
}

service UtilsService {
    rpc CountEmailsByTargetId(Empty) returns (Count) {}
    rpc GetEmailsByTargetId(Page) returns (stream Email) {}
    rpc SendEmail(Email) returns (Email) {}

    rpc CountFilesByTargetId(Empty) returns (Count) {}
    // Returns stream of files metadata without content
    rpc GetFilesByTargetId(Page) returns (stream File) {}
    // Returns single file with content as stream
    rpc GetFileById(Id) returns (stream File) {}
    // Send single file with content as stream
    rpc UploadFile(stream File) returns (stream File) {}
    rpc DeleteFileById(Id) returns (Empty) {}
}

